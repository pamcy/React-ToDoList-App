{"version":3,"sources":["components/TabMenuList.js","components/AddTaskForm.js","components/SingleInfoBar.js","components/EditTaskHead.js","components/EditTaskBody.js","components/SingleTask.js","sample-todos.js","components/TabContent.js","components/GithubBanner.js","components/App.js","index.js"],"names":["TabMenuList","react_default","a","createElement","className","react_router_dom","exact","to","activeClassName","AddTaskForm","formRef","React","createRef","titleRef","dateRef","timeRef","commentRef","completedRef","importantRef","createTask","e","preventDefault","addTask","_this","props","task","title","current","value","date","time","comment","completed","checked","important","alert","currentTarget","reset","clearInputValue","cancelAddTask","ref","this","onSubmit","type","name","id","htmlFor","placeholder","autoFocus","rows","onClick","Component","SingleInfoBar","_ref","data","EditTaskHead","uid","handleInputChange","openEditMode","isEditMode","editStatus","importantStatus","completedStatus","infoBarStatus","length","paddingStyle","concat","onChange","components_SingleInfoBar","EditTaskBody","saveTask","resetTask","SingleTask","_e$currentTarget","inputValue","_this$props","updateTask","resetStar","Object","objectSpread","defineProperty","_this$props2","components_EditTaskHead","components_EditTaskBody","todos","TabContent","baseState","state","tasks","toConsumableArray","sampleTodos","newTaskIsOpen","openNewTask","setState","Date","now","updatedTask","map","updatedContent","stateTasksValue","localStorage","getItem","baseStateValue","JSON","parse","setItem","stringify","_this2","_this$state","currentPath","match","path","results","content","filter","components_AddTaskForm","result","sort","b","components_SingleTask","key","GithubBanner","GithubCorner_default","href","bannerColor","size","target","App","routes","component","components_GithubBanner","components_TabMenuList","route","index","react_router","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.a0848fe7.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\n\nconst TabMenuList = () => (\n  <div className=\"tab-menu\">\n    <ul className=\"tab-menu__list wrapper-s\">\n      <li className=\"tab-menu__item\">\n        <NavLink exact to=\"/\" className=\"tab-menu__link\" activeClassName=\"is-active\">\n          My Tasks\n        </NavLink>\n      </li>\n      <li className=\"tab-menu__item\">\n        <NavLink to=\"/progress\" className=\"tab-menu__link\" activeClassName=\"is-active\">\n          In Progress\n        </NavLink>\n      </li>\n      <li className=\"tab-menu__item\">\n        <NavLink to=\"/completed\" className=\"tab-menu__link\" activeClassName=\"is-active\">\n          Completed\n        </NavLink>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default TabMenuList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddTaskForm extends React.Component {\n  static propTypes = {\n    addTask: PropTypes.func.isRequired,\n    cancelAddTask: PropTypes.func.isRequired,\n  };\n\n  formRef = React.createRef();\n\n  titleRef = React.createRef();\n\n  dateRef = React.createRef();\n\n  timeRef = React.createRef();\n\n  commentRef = React.createRef();\n\n  completedRef = React.createRef();\n\n  importantRef = React.createRef();\n\n  createTask = e => {\n    e.preventDefault();\n\n    const { addTask } = this.props;\n    const task = {\n      title: this.titleRef.current.value,\n      date: this.dateRef.current.value,\n      time: this.timeRef.current.value,\n      comment: this.commentRef.current.value,\n      completed: this.completedRef.current.checked,\n      important: this.importantRef.current.checked,\n    };\n\n    // If the task marks completed, uncheck the star automatically.\n    if (task.completed) {\n      task.important = false;\n    }\n\n    if (this.titleRef.current.value === '') {\n      alert('Task name must be filled in!');\n    } else {\n      addTask(task);\n      e.currentTarget.reset();\n    }\n  };\n\n  clearInputValue = () => {\n    const { cancelAddTask } = this.props;\n    this.formRef.current.reset();\n    cancelAddTask();\n  };\n\n  render() {\n    return (\n      <form ref={this.formRef} className=\"single-task__edit new-task\" onSubmit={this.createTask}>\n        <div className=\"edit-head\">\n          <div className=\"edit-head__checkbox\">\n            <input ref={this.completedRef} type=\"checkbox\" name=\"completed\" id=\"completed\" />\n            <label htmlFor=\"completed\" />\n          </div>\n          <div className=\"edit-head__content\">\n            <input\n              ref={this.titleRef}\n              className=\"edit-head__input-title\"\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Add a task\"\n              autoFocus\n            />\n          </div>\n          <div className=\"edit-head__priority\">\n            <input ref={this.importantRef} type=\"checkbox\" name=\"important\" id=\"important\" />\n            <label htmlFor=\"important\" />\n          </div>\n          <div className=\"edit-head__edit is-editing\">\n            <i className=\"fas fa-pen edit-head__icon-edit\" />\n          </div>\n        </div>\n        <div className=\"edit-body\">\n          <div className=\"edit-body__content\">\n            <div className=\"edit-body__field\">\n              <label htmlFor=\"deadline\" className=\"edit-body__label\">\n                Deadline\n              </label>\n              <div className=\"edit-body__input-wrapper\">\n                <input ref={this.dateRef} type=\"date\" name=\"date\" />\n                <input ref={this.timeRef} type=\"time\" name=\"time\" />\n              </div>\n            </div>\n            <div className=\"edit-body__field\">\n              <label htmlFor=\"comment\" className=\"edit-body__label\">\n                Comment\n              </label>\n              <textarea\n                ref={this.commentRef}\n                name=\"comment\"\n                rows=\"8\"\n                placeholder=\"Type your memo here...\"\n              />\n            </div>\n          </div>\n          <div className=\"edit-body__btns\">\n            <button\n              type=\"button\"\n              className=\"edit-body__btn edit-body__btn--cancel\"\n              onClick={this.clearInputValue}\n            >\n              &#10005; Cancel\n            </button>\n            <button type=\"submit\" className=\"edit-body__btn edit-body__btn--add\">\n              ＋ Add Task\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default AddTaskForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SingleInfoBar = ({ data }) => {\n  return (\n    <div className=\"single-item__infos\">\n      {data.date && (\n        <span className=\"single-item__info\">\n          <i className=\"far fa-calendar-alt single-item__icon-calendar\" />\n          <span className=\"single-item__txt\">{data.date}</span>\n        </span>\n      )}\n      {data.comment && (\n        <span className=\"single-item__info\">\n          <i className=\"far fa-comment-dots single-item__icon-comment\" />\n        </span>\n      )}\n    </div>\n  );\n};\n\nSingleInfoBar.propTypes = {\n  data: PropTypes.shape({\n    date: PropTypes.string,\n    comment: PropTypes.string,\n  }).isRequired,\n};\n\nexport default SingleInfoBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInfoBar from './SingleInfoBar';\n\nconst EditTaskHead = props => {\n  const { uid, data, handleInputChange, openEditMode } = props;\n  const { title, date, comment, isEditMode, completed, important } = data;\n  const editStatus = isEditMode ? 'is-editing' : '';\n  const importantStatus = important ? 'is-important' : '';\n  const completedStatus = completed ? 'is-completed' : '';\n  const infoBarStatus = date.length > 0 || comment.length > 0;\n  const paddingStyle = infoBarStatus ? 'has-infoBar' : '';\n\n  return (\n    <div className={`edit-head ${importantStatus}`}>\n      <div className=\"edit-head__checkbox\">\n        <input\n          type=\"checkbox\"\n          name=\"completed\"\n          id={`completed-${uid}`}\n          checked={completed}\n          onChange={handleInputChange}\n        />\n        <label htmlFor={`completed-${uid}`} />\n      </div>\n      <div className=\"edit-head__content\" onClick={() => openEditMode(uid)}>\n        <input\n          className={`edit-head__input-title ${completedStatus} ${paddingStyle}`}\n          type=\"text\"\n          name=\"title\"\n          value={title}\n          placeholder=\"Add a task\"\n          onChange={handleInputChange}\n        />\n        {infoBarStatus && <SingleInfoBar data={data} />}\n      </div>\n      <div className=\"edit-head__priority\">\n        <input\n          type=\"checkbox\"\n          name=\"important\"\n          id={`important-${uid}`}\n          checked={important}\n          onChange={handleInputChange}\n        />\n        <label htmlFor={`important-${uid}`} />\n      </div>\n      <div className={`edit-head__edit ${editStatus}`} onClick={() => openEditMode(uid)}>\n        <i className=\"fas fa-pen edit-head__icon-edit\" />\n      </div>\n    </div>\n  );\n};\n\nEditTaskHead.propTypes = {\n  uid: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    date: PropTypes.string,\n    time: PropTypes.string,\n    comment: PropTypes.string,\n    important: PropTypes.bool,\n    completed: PropTypes.bool,\n    isEditMode: PropTypes.bool,\n  }).isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  openEditMode: PropTypes.func.isRequired,\n};\n\nexport default EditTaskHead;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst EditTaskBody = props => {\n  const { uid, data, handleInputChange, saveTask, resetTask } = props;\n  const { isEditMode, date, time, comment } = data;\n\n  if (!isEditMode) {\n    return null;\n  }\n\n  return (\n    <div className=\"edit-body\">\n      <div className=\"edit-body__content\">\n        <div className=\"edit-body__field\">\n          <label htmlFor=\"deadline\" className=\"edit-body__label\">\n            Deadline\n          </label>\n          <div className=\"edit-body__input-wrapper\">\n            <input type=\"date\" name=\"date\" value={date} onChange={handleInputChange} />\n            <input type=\"time\" name=\"time\" value={time} onChange={handleInputChange} />\n          </div>\n        </div>\n        <div className=\"edit-body__field\">\n          <label htmlFor=\"comment\" className=\"edit-body__label\">\n            Comment\n          </label>\n          <textarea\n            name=\"comment\"\n            rows=\"8\"\n            placeholder=\"Type your memo here...\"\n            value={comment}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      <div className=\"edit-body__btns\">\n        <button\n          type=\"button\"\n          className=\"edit-body__btn edit-body__btn--cancel\"\n          onClick={() => resetTask()}\n        >\n          &#10005; Cancel\n        </button>\n        <button\n          type=\"button\"\n          className=\"edit-body__btn edit-body__btn--add\"\n          onClick={e => saveTask(e, uid)}\n        >\n          ＋ Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nEditTaskBody.propTypes = {\n  uid: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    date: PropTypes.string,\n    time: PropTypes.string,\n    comment: PropTypes.string,\n    important: PropTypes.bool,\n    completed: PropTypes.bool,\n    isEditMode: PropTypes.bool,\n  }).isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  saveTask: PropTypes.func.isRequired,\n  resetTask: PropTypes.func.isRequired,\n};\n\nexport default EditTaskBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport EditTaskHead from './EditTaskHead';\nimport EditTaskBody from './EditTaskBody';\n\nclass SingleTask extends React.Component {\n  static propTypes = {\n    uid: PropTypes.number.isRequired,\n    data: PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      date: PropTypes.string,\n      time: PropTypes.string,\n      comment: PropTypes.string,\n      important: PropTypes.bool,\n      completed: PropTypes.bool,\n      isEditMode: PropTypes.bool,\n    }).isRequired,\n    updateTask: PropTypes.func.isRequired,\n    saveTask: PropTypes.func.isRequired,\n    resetTask: PropTypes.func.isRequired,\n    openEditMode: PropTypes.func.isRequired,\n  };\n\n  handleInputChange = e => {\n    const { name, value, type, checked } = e.currentTarget;\n    const inputValue = type === 'checkbox' ? checked : value;\n    const { uid, data, updateTask } = this.props;\n    let resetStar = {};\n\n    // If the task marks completed, uncheck the star automatically.\n    if ((name === 'completed' && checked) || data.completed) {\n      resetStar = {\n        important: false,\n      };\n    }\n\n    updateTask(uid, {\n      [name]: inputValue,\n      ...resetStar,\n    });\n  };\n\n  render() {\n    const { uid, data, openEditMode, saveTask, resetTask } = this.props;\n\n    return (\n      <li className=\"single-task\">\n        <form className=\"single-task__edit\">\n          <EditTaskHead\n            uid={uid}\n            data={data}\n            handleInputChange={this.handleInputChange}\n            openEditMode={openEditMode}\n          />\n          <EditTaskBody\n            uid={uid}\n            data={data}\n            handleInputChange={this.handleInputChange}\n            saveTask={saveTask}\n            resetTask={resetTask}\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nexport default SingleTask;\n","const todos = [\n  {\n    id: 1,\n    title: 'Grab Black Friday Sales',\n    date: '2019-12-23',\n    time: '23:30',\n    comment: '',\n    completed: false,\n    important: false,\n    isEditMode: false,\n  },\n  {\n    id: 2,\n    title: 'Learn Redux or Hook',\n    date: '',\n    time: '',\n    comment: 'https://www.reddit.com/r/reactjs/comments/ap614g/new_to_react_should_i_learn_redux/',\n    completed: false,\n    important: false,\n    isEditMode: false,\n  },\n  {\n    id: 3,\n    title: 'Watch Bohemian Rhapsody',\n    date: '',\n    time: '',\n    comment: '',\n    completed: true,\n    important: false,\n    isEditMode: false,\n  },\n  {\n    id: 4,\n    title: 'Buy new MacBook Pro without touch bar',\n    date: '2020-03-30',\n    time: '',\n    comment: '🙈🍎💻',\n    completed: false,\n    important: true,\n    isEditMode: false,\n  },\n  {\n    id: 5,\n    title: 'BBQ in wilderness',\n    date: '',\n    time: '15:00',\n    comment: 'Make new recipe: mixed leaf & orange salad',\n    completed: true,\n    important: false,\n    isEditMode: false,\n  },\n];\n\nexport default todos;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AddTaskForm from './AddTaskForm';\nimport SingleTask from './SingleTask';\nimport sampleTodos from '../sample-todos';\n\nclass TabContent extends React.Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      path: PropTypes.string,\n    }).isRequired,\n  };\n\n  baseState = '';\n\n  state = {\n    tasks: [...sampleTodos],\n    newTaskIsOpen: false,\n  };\n\n  componentDidMount() {\n    const stateTasksValue = localStorage.getItem('todoItem');\n    const baseStateValue = localStorage.getItem('baseTodos');\n\n    if (stateTasksValue) {\n      this.setState({ tasks: JSON.parse(stateTasksValue) });\n    }\n\n    if (baseStateValue) {\n      this.baseState = JSON.parse(baseStateValue);\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoItem', JSON.stringify(this.state.tasks));\n    localStorage.setItem('baseTodos', JSON.stringify(this.baseState));\n  }\n\n  openNewTask = () => {\n    this.setState({ newTaskIsOpen: true });\n  };\n\n  addTask = task => {\n    const tasks = [\n      ...this.state.tasks,\n      {\n        id: Date.now(),\n        ...task,\n        isEditMode: false,\n      },\n    ];\n\n    this.setState({\n      tasks,\n      newTaskIsOpen: false,\n    });\n  };\n\n  cancelAddTask = () => {\n    this.setState({ newTaskIsOpen: false });\n  };\n\n  openEditMode = uid => {\n    const tasks = [...this.state.tasks];\n    const updatedTask = tasks.map(task => {\n      task.isEditMode = false; // Close all opened task\n      this.baseState = this.state; // Save a copy of this.state\n\n      if (task.id === uid) {\n        return {\n          ...task,\n          isEditMode: true,\n        };\n      }\n\n      return task;\n    });\n\n    this.setState({ tasks: updatedTask });\n  };\n\n  saveTask = (e, uid) => {\n    e.preventDefault();\n\n    const tasks = [...this.state.tasks];\n    const updatedTask = tasks.map(task => {\n      if (task.id === uid) {\n        return {\n          ...task,\n          isEditMode: false,\n        };\n      }\n\n      return task;\n    });\n\n    this.setState({ tasks: updatedTask });\n  };\n\n  updateTask = (uid, updatedContent) => {\n    const tasks = [...this.state.tasks];\n    const updatedTask = tasks.map(task => {\n      if (task.id === uid) {\n        return {\n          ...task,\n          ...updatedContent,\n        };\n      }\n\n      return task;\n    });\n\n    this.setState({ tasks: updatedTask });\n  };\n\n  resetTask = () => {\n    this.setState(this.baseState);\n  };\n\n  render() {\n    const { tasks, newTaskIsOpen } = this.state;\n    const currentPath = this.props.match.path;\n    const results = [\n      {\n        path: '/',\n        content: tasks,\n      },\n      {\n        path: '/progress',\n        content: tasks.filter(task => !task.completed),\n      },\n      {\n        path: '/completed',\n        content: tasks.filter(task => task.completed),\n      },\n    ];\n\n    return (\n      <div className=\"tab-content wrapper-s\">\n        {newTaskIsOpen ? (\n          <AddTaskForm addTask={this.addTask} cancelAddTask={this.cancelAddTask} />\n        ) : (\n          <div className=\"add-task\" onClick={this.openNewTask}>\n            ＋ Add a task\n          </div>\n        )}\n\n        <ul className=\"tasks-wrapper\">\n          {results.map(\n            result =>\n              currentPath === result.path &&\n              result.content\n                .sort((a, b) => b.important - a.important)\n                .map(task => (\n                  <SingleTask\n                    key={task.id}\n                    uid={task.id}\n                    data={task}\n                    openEditMode={this.openEditMode}\n                    updateTask={this.updateTask}\n                    saveTask={this.saveTask}\n                    resetTask={this.resetTask}\n                  />\n                ))\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TabContent;\n","import React from 'react';\nimport GithubCorner from 'react-github-corner';\n\nconst GithubBanner = () => (\n  <div className=\"github-banner\">\n    <GithubCorner\n      href=\"https://github.com/pamcy/React-ToDoList-App\"\n      bannerColor=\"#283044\"\n      size=\"77\"\n      target=\"_blank\"\n    />\n  </div>\n);\n\nexport default GithubBanner;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport TabMenuList from './TabMenuList';\nimport TabContent from './TabContent';\nimport GithubBanner from './GithubBanner';\n\nconst App = () => {\n  const routes = [\n    {\n      path: '/',\n      exact: true,\n      component: TabContent,\n    },\n    {\n      path: '/progress',\n      component: TabContent,\n    },\n    {\n      path: '/completed',\n      component: TabContent,\n    },\n  ];\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <GithubBanner />\n        <TabMenuList />\n        {routes.map((route, index) => (\n          <Route key={index} path={route.path} exact={route.exact} component={route.component} />\n        ))}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './layout/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}